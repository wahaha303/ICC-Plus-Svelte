export type filterStyling = {
    selFilterBlurIsOn?: boolean,
    selFilterBlur?: number,
    selFilterBrightIsOn?: boolean,
    selFilterBright?: number,
    selFilterContIsOn?: boolean,
    selFilterCont?: number,
    selFilterGrayIsOn?: boolean,
    selFilterGray?: number,
    selFilterHueIsOn?: boolean,
    selFilterHue?: number,
    selFilterInvertIsOn?: boolean,
    selFilterInvert?: number,
    selFilterOpacIsOn?: boolean,
    selFilterOpac?: number,
    selFilterSaturIsOn?: boolean,
    selFilterSatur?: number,
    selFilterSepiaIsOn?: boolean,
    selFilterSepia?: number,
    selBgColorIsOn?: boolean,
    selOverlayOnImage?: boolean,
    selFilterBgColor?: string,
    selBorderColorIsOn?: boolean,
    selFilterBorderColor?: string,
    selCTitleColorIsOn?: boolean,
    selFilterCTitleColor?: string,
    selCTextColorIsOn?: boolean,
    selFilterCTextColor?: string,
    selATitleColorIsOn?: boolean,
    selFilterATitleColor?: string,
    selATextColorIsOn?: boolean,
    selFilterATextColor?: string,
    selScoreTextColorIsOn?: boolean,
    selFilterSTextColor?: string,
    reqFilterBlurIsOn?: boolean,
    reqFilterBlur?: number,
    reqFilterBrightIsOn?: boolean,
    reqFilterBright?: number,
    reqFilterContIsOn?: boolean,
    reqFilterCont?: number,
    reqFilterGrayIsOn?: boolean,
    reqFilterGray?: number,
    reqFilterHueIsOn?: boolean,
    reqFilterHue?: number,
    reqFilterInvertIsOn?: boolean,
    reqFilterInvert?: number,
    reqFilterOpacIsOn?: boolean,
    reqFilterOpac?: number,
    reqFilterSaturIsOn?: boolean,
    reqFilterSatur?: number,
    reqFilterSepiaIsOn?: boolean,
    reqFilterSepia?: number,
    reqBgColorIsOn?: boolean,
    reqOverlayOnImage?: boolean,
    reqFilterBgColor?: string,
    reqBorderColorIsOn?: boolean,
    reqFilterBorderColor?: string,
    reqCTitleColorIsOn?: boolean,
    reqFilterCTitleColor?: string,
    reqCTextColorIsOn?: boolean,
    reqFilterCTextColor?: string,
    reqATitleColorIsOn?: boolean,
    reqFilterATitleColor?: string,
    reqATextColorIsOn?: boolean,
    reqFilterATextColor?: string,
    reqScoreTextColorIsOn?: boolean,
    reqFilterSTextColor?: string,
    reqFilterVisibleIsOn?: boolean,
    unselFilterBlurIsOn?: boolean,
    unselFilterBlur?: number,
    unselFilterBrightIsOn?: boolean,
    unselFilterBright?: number,
    unselFilterContIsOn?: boolean,
    unselFilterCont?: number,
    unselFilterGrayIsOn?: boolean,
    unselFilterGray?: number,
    unselFilterHueIsOn?: boolean,
    unselFilterHue?: number,
    unselFilterInvertIsOn?: boolean,
    unselFilterInvert?: number,
    unselFilterOpacIsOn?: boolean,
    unselFilterOpac?: number,
    unselFilterSaturIsOn?: boolean,
    unselFilterSatur?: number,
    unselFilterSepiaIsOn?: boolean,
    unselFilterSepia?: number
};
export type textStyling = {
    customRowTitle?: boolean,
    rowTitle?: string,
    customRowText?: boolean,
    rowText?: string,
    customObjectTitle?: boolean,
    objectTitle?: string,
    customObjectText?: boolean,
    objectText?: string,
    customAddonTitle?: boolean,
    addonTitle?: string,
    customAddonText?: boolean,
    addonText?: string,
    customScoreText?: boolean,
    scoreText?: string,
    rowTitleTextSize?: number,
    rowTextTextSize?: number,
    objectTitleTextSize?: number,
    objectTextTextSize?: number,
    addonTitleTextSize?: number,
    addonTextTextSize?: number,
    scoreTextSize?: number,
    rowTitleColor?: string,
    rowTextColor?: string,
    objectTitleColor?: string,
    objectTextColor?: string,
    addonTitleColor?: string,
    addonTextColor?: string,
    scoreTextColor?: string,
    rowTitleAlign?: string,
    rowTextAlign?: string,
    objectTitleAlign?: string,
    objectTextAlign?: string,
    addonTitleAlign?: string,
    addonTextAlign?: string,
    scoreTextAlign?: string
};
export type objectImageStyling = {
    objectImgBorderStyle?: string,
    objectImgBorderWidth?: number,
    objectImageWidth?: number,
    objectImageMarginTop?: number,
    objectImageMarginBottom?: number,
    objectImgBorderRadiusTopLeft?: number,
    objectImgBorderRadiusTopRight?: number,
    objectImgBorderRadiusBottomRight?: number,
    objectImgBorderRadiusBottomLeft?: number,
    objectImgBorderRadiusIsPixels?: boolean,
    objectImgBorderIsOn?: boolean,
    objectImgOverflowIsOn?: boolean,
    objectImgBorderColor?: string,
    objectImgObjectFillStyle?: string,
    objectImgObjectFillIsOn?: boolean,
    objectImageBoxWidth?: number
};
export type rowImageStyling = {
    rowImgBorderStyle?: string,
    rowImgBorderWidth?: number,
    rowImageWidth?: number,
    rowImageMarginTop?: number,
    rowImageMarginBottom?: number,
    rowImgBorderRadiusTopLeft?: number,
    rowImgBorderRadiusTopRight?: number,
    rowImgBorderRadiusBottomRight?: number,
    rowImgBorderRadiusBottomLeft?: number,
    rowImgBorderRadiusIsPixels?: boolean,
    rowImgBorderIsOn?: boolean,
    rowImgOverflowIsOn?: boolean,
    rowImgBorderColor?: string,
    rowImageBoxWidth?: number
};
export type addonImageStyling = {
    useAddonImage?: boolean,
    addonImgBorderStyle?: string,
    addonImgBorderWidth?: number,
    addonImageWidth?: number,
    addonImageMarginTop?: number,
    addonImageMarginBottom?: number,
    addonImgBorderRadiusTopLeft?: number,
    addonImgBorderRadiusTopRight?: number,
    addonImgBorderRadiusBottomRight?: number,
    addonImgBorderRadiusBottomLeft?: number,
    addonImgBorderRadiusIsPixels?: boolean,
    addonImgBorderIsOn?: boolean,
    addonImgOverflowIsOn?: boolean,
    addonImgBorderColor?: string,
    addonImgObjectFillStyle?: string,
    addonImgObjectFillIsOn?: boolean,
    addonImageBoxWidth?: number
};
export type backgroundStyling = {
    bgColorIsOn?: boolean,
    backgroundColor?: string,
    rowBgColorIsOn?: boolean,
    rowBgColor?: string,
    objectBgColorIsOn?: boolean,
    objectBgColor?: string,
    isBackgroundRepeat?: boolean,
    isBackgroundFitIn?: boolean,
    backgroundImage?: string,
    isRowBackgroundRepeat?: boolean,
    isRowBackgroundFitIn?: boolean,
    rowBackgroundImage?: string,
    isObjectBackgroundRepeat?: boolean,
    isObjectBackgroundFitIn?: boolean,
    objectBackgroundImage?: string
};
export type objectStyling = {
    objectHeight?: boolean,
    objectDesignIsAdvanced?: boolean,
    objectMargin?: number,
    objectTextPadding?: number,
    objectBorderStyle?: string,
    objectBorderWidth?: number,
    objectBorderIsOn?: boolean,
    objectDropShadowH?: number,
    objectDropShadowV?: number,
    objectDropShadowBlur?: number,
    objectDropShadowSpread?: number,
    objectDropShadowIsOn?: boolean,
    objectUseBoxShadowIsOn?: boolean,
    objectBorderRadiusTopLeft?: number,
    objectBorderRadiusTopRight?: number,
    objectBorderRadiusBottomRight?: number,
    objectBorderRadiusBottomLeft?: number,
    objectBorderRadiusIsPixels?: boolean,
    objectOverflowIsOn?: boolean,
    objectDropShadowColor?: string,
    objectGradientIsOn?: boolean,
    objectGradient?: string,
    objectGradientOnSelect?: string,
    objectGradientOnReq?: string,
    objectBorderColor?: string,
    objectBorderImage?: string,
    objectBorderImageRepeat?: string,
    objectBorderImageWidth?: number,
    objectBorderImageSliceTop?: number,
    objectBorderImageSliceBottom?: number,
    objectBorderImageSliceLeft?: number,
    objectBorderImageSliceRight?: number,
    removeSpaceAddonIsOn?: boolean,
    titlePaddingIsOn?: boolean
};
export type rowStyling = {
    rowDesignIsAdvanced?: boolean,
    rowMargin?: number,
    rowBodyMarginSides?: number,
    rowBodyMarginTop?: number,
    rowBodyMarginBottom?: number,
    rowTextPaddingY?: number,
    rowTextPaddingX?: number,
    rowOverflowIsOn?: boolean,
    rowDropShadowH?: number,
    rowDropShadowV?: number,
    rowDropShadowBlur?: number,
    rowDropShadowSpread?: number,
    rowDropShadowColor?: string,
    rowButtonXPadding?: number,
    rowButtonYPadding?: number,
    rowDropShadowIsOn?: boolean,
    rowUseBoxShadowIsOn?: boolean,
    rowBorderRadiusTopLeft?: number,
    rowBorderRadiusTopRight?: number,
    rowBorderRadiusBottomRight?: number,
    rowBorderRadiusBottomLeft?: number,
    rowBorderRadiusIsPixels?: boolean,
    rowBorderStyle?: string,
    rowBorderWidth?: number,
    rowBorderIsOn?: boolean,
    rowBorderColor?: string,
    rowGradientIsOn?: boolean,
    rowGradient?: string,
    rowBorderImage?: string,
    rowBorderImageRepeat?: string,
    rowBorderImageWidth?: number,
    rowBorderImageSliceTop?: number,
    rowBorderImageSliceBottom?: number,
    rowBorderImageSliceLeft?: number,
    rowBorderImageSliceRight?: number,
    borderRadiusSuffix?: string
};
export type addonStyling = {
    useAddonDesign?: boolean,
    addonDesignIsAdvanced?: boolean,
    addonMargin?: number,
    addonTextPadding?: number,
    addonBorderStyle?: string,
    addonBorderWidth?: number,
    addonBorderIsOn?: boolean,
    addonDropShadowH?: number,
    addonDropShadowV?: number,
    addonDropShadowBlur?: number,
    addonDropShadowSpread?: number,
    addonDropShadowIsOn?: boolean,
    addonUseBoxShadowIsOn?: boolean,
    addonBorderRadiusTopLeft?: number,
    addonBorderRadiusTopRight?: number,
    addonBorderRadiusBottomRight?: number,
    addonBorderRadiusBottomLeft?: number,
    addonBorderRadiusIsPixels?: boolean,
    addonOverflowIsOn?: boolean,
    addonDropShadowColor?: string,
    addonGradientIsOn?: boolean,
    addonGradient?: string,
    addonGradientOnSelect?: string,
    addonGradientOnReq?: string,
    addonBorderColor?: string,
    addonBorderImage?: string,
    addonBorderImageRepeat?: string,
    addonBorderImageWidth?: number,
    addonBorderImageSliceTop?: number,
    addonBorderImageSliceBottom?: number,
    addonBorderImageSliceLeft?: number,
    addonBorderImageSliceRight?: number,
    useAddonBackgroundImage?: boolean,
    addonBackgroundImage?: string,
    isAddonBackgroundFitIn?: boolean,
    isAddonBackgroundRepeat?: boolean,
    addonBgColorIsOn?: boolean,
    addonBgColor?: string,
    addonTitlePaddingIsOn?: boolean
};
export type multiChoiceStyling = {
    customMultiTextFont?: boolean,
    multiChoiceCounterPosition?: number,
    multiChoiceCounterSize?: number,
    multiChoiceTextFont?: string,
    multiChoiceTextSize?: number
};
export type pointBarStyling = {
    barTextPadding?: number,
    barTextMargin?: number,
    customBarTextFont?: boolean,
    barTextFont?: string,
    barPadding?: number,
    barMargin?: number,
    barTextSize?: number,
    barTextColor?: string,
    barPointPos?: string,
    barPointNeg?: string,
    barIconColor?: string,
    barBackgroundColor?: string
};
export type backpackStyling = {
    useBackpackDesign?: boolean,
    backpackBgColor?: string,
    isBackpackBgRepeat?: boolean,
    isBackpackBgFitIn?: boolean,
    backpackBgImage?: string,
    backPackWidth?: number
};
export type Styling = {[key: string]: any} & filterStyling & textStyling & objectImageStyling & rowImageStyling & addonImageStyling & backgroundStyling & objectStyling & rowStyling & addonStyling & multiChoiceStyling & pointBarStyling & backpackStyling;
export type Requireds = {
    required: boolean,
    requireds: Requireds[],
    orRequired: { req?: string }[],
    id: string,
    type: string,
    reqId: string,
    reqId1: string,
    reqId2: string,
    reqId3: string,
    reqPoints: number,
    showRequired: boolean,
    hideRequired?: boolean,
    operator?: string,
    afterText: string,
    beforeText: string,
    orNum?: number,
    selNum?: number,
    selFromOperators?: string,
    selGroups?: string[],
    selRows?: string[],
    more?: { operator?: string, type?: string, id?: string, points?: number }[],
    customTextIsOn?: boolean,
    customText?: string
};
export type Addon = {
    [key: string]: any;
    id: string,
    title: string,
    text: string,
    template: number,
    image: string,
    requireds: Requireds[],
    parentId: string,
    showAddon?: boolean,
    defaultTemplate?: number,
    templateStack?: {
        id: string,
        data: number
    }[]
};
export type Discount = {
    isStackable: boolean,
    calcValue: number,
    discountedFrom: string[],
    discountedValue: number,
    showDiscount: boolean,
    beforeText?: string,
    afterText?: string,
    replaceText?: boolean,
    hideValue?: boolean,
    hideIcon?: boolean
};
export type Score = {
    [key: string]: any,
    idx: string,
    id: string,
    value: number,
    type: string,
    beforeText: string,
    afterText: string,
    requireds: Requireds[],
    showScore: boolean,
    isActive?: boolean,
    isActiveMul?: boolean[],
    isActiveMulMinus?: boolean[],
    hideValue?: boolean,
    isNotRecalculatable?: boolean,
    isNotDiscountable?: boolean,
    isRandom?: boolean,
    minValue?: number,
    maxValue?: number,
    setValue?: boolean,
    discountIsOn?: boolean,
    discountShow?: boolean,
    discountBeforeText?: string,
    discountAfterText?: string,
    discountScore?: number,
    discountScoreCal?: number,
    isChangeDiscount?: boolean,
    tmpDisScore?: number,
    tmpDiscount?: Discount[],
    discountedFrom?: string[],
    dupTextA?: {
        [key: string]: number
    },
    dupTextB?: {
        [key: string]: number
    },
    discountTextA?: string[],
    discountTextB?: string[],
    notStackableDiscount?: boolean,
    multiplyByTimes?: boolean,
    appliedDiscount?: boolean,
    replaceText?: boolean,
    hideDisValue?: boolean,
    hideDisIcon?: boolean
}
export type Choice = {
    [key: string]: any,
    id: string,
    index: number,
    title: string,
    text: string,
    debugTitle: string,
    image: string,
    template: number,
    objectWidth: string,
    isActive: boolean,
    isVisible: boolean,
    multipleUseVariable: number,
    initMultipleTimesMinus: number,
    selectedThisManyTimesProp: number,
    defaultAspectWidth: number,
    defaultAspectHeight: number,
    requireds: Requireds[],
    addons: Addon[],
    scores: Score[],
    groups: string[],
    objectDesignGroups?: string[],
    isPrivateStyling?: boolean,
    privateFilterIsOn?: boolean,
    privateTextIsOn?: boolean,
    privateObjectImageIsOn?: boolean,
    privateObjectIsOn?: boolean,
    privateAddonImageIsOn?: boolean,
    privateAddonIsOn?: boolean,
    privateBackgroundIsOn?: boolean,
    privateMultiChoiceIsOn?: boolean,
    styling?: Styling,
    hideMultipleCounter?: boolean,
    allowSelectByClick?: boolean,
    hideCounterUntilSelect?: boolean,
    addonJustify?: string,
    isSelectableMultiple?: boolean,
    isMultipleUseVariable?: boolean,
    multipleScoreId?: string,
    numMultipleTimesMinus?: number,
    numMultipleTimesPluss?: number,
    isNotSelectable?: boolean,
    selectOnce?: boolean,
    notDeselectedByClean?: boolean,
    isNotResult?: boolean,
    isImageUpload?: boolean,
    cleanACtivatedOnSelect?: boolean,
    activateOtherChoice?: boolean,
    isNotDeactivate?: boolean,
    isAllowDeselect?: boolean,
    isActivateRandom?: boolean,
    numActivateRandom?: number,
    activateThisChoice?: string,
    deactivateOtherChoice?: boolean,
    deactivateThisChoice?: string,
    discountOther?: boolean,
    discountLowLimitIsOn?: boolean,
    discountLowLimit?: number,
    discountShow?: boolean,
    replaceScoreText?: boolean,
    hideScoreValue?: boolean,
    hideScoreIcon?: boolean,
    discountBeforeText?: string,
    discountAfterText?: string,
    isDisChoices?: boolean,
    discountRows?: string[],
    discountChoices?: string[],
    discountGroups?: string[],
    discountPointTypes?: string[],
    discountOperator?: string,
    discountValue?: number,
    stackableDiscount?: boolean,
    useDiscountCount?: boolean,
    discountCount?: number,
    numDiscountChoices?: number,
    duplicateRow?: boolean,
    dRowAddSufReq?: boolean,
    dRowAddSufFunc?: boolean,
    duplicateRowId?: string,
    duplicateRowPlace?: string,
    isContentHidden?: boolean,
    hiddenContentsRow?: string[],
    hiddenContentsType?: string[],
    addToAllowChoice?: boolean,
    idOfAllowChoice?: string[],
    numbAddToAllowChoice?: number,
    showAllAddons?: boolean,
    changeTemplates?: boolean,
    changeAddonTemplate?: boolean,
    changeWidth?: boolean,
    changeTemplatesList?: string,
    changeToThisTemplate?: number,
    changeWidthList?: string,
    changeToThisWidth?: string,
    defaultTemplate?: number,
    defaultWidth?: string,
    scrollToRow?: boolean,
    scrollToObject?: boolean,
    scrollObjectId?: string,
    scrollRowId?: string,
    changePointBar?: boolean,
    changeBarBgColorIsOn?: boolean,
    changeBarTextColorIsOn?: boolean,
    changeBarIconColorIsOn?: boolean,
    changedBarBgColor?: string,
    changedBarTextColor?: string,
    changedBarIconColor?: string,
    changeBackground?: boolean,
    changeBgImage?: boolean,
    changedBgColorCode?: string,
    bgImage?: string,
    setBgmIsOn?: boolean,
    bgmId?: string,
    bgmFadeIn?: boolean,
    bgmFadeOut?: boolean,
    bgmFadeInSec?: number,
    bgmFadeOutSec?: number,
    bgmNoLoop?: boolean,
    muteBgm?: boolean,
    isFadeTransition?: boolean,
    fadeTransitionColor?: string,
    fadeTransitionTime?: number,
    multiplyPointtypeIsOn?: boolean,
    pointTypeToMultiply?: string[],
    multiplyWithThis?: number | string,
    multiplyPointtypeIsId?: boolean,
    dividePointtypeIsOn?: boolean,
    pointTypeToDivide?: string[],
    divideWithThis?: number,
    startingSumAtMultiply?: {
        value: number,
        calcVal: number
    }[],
    startingSumAtDivide?: {
        value: number,
        calcVal: number
    }[],
    multiplyPointtypeIsOnCheck?: boolean,
    dividePointtypeIsOnCheck?: boolean,
    isChangeVariables?: boolean,
    changedVariables?: string[],
    changeType?: string,
    textfieldIsOn?: boolean,
    customTextfieldIsOn?: boolean,
    idOfTheTextfieldWord?: string,
    wordPromptText?: string,
    wordChangeSelect?: string,
    wordChangeDeselect?: string,
    confirmIsOn?: boolean,
    backpackBtnRequirement?: boolean,
    forcedActivated?: boolean,
    activatedFrom?: number,
    activatedRandom?: string[],
    activatedRandomMul?: string[][],
    defaultImage?: string,
    tempMultipleValue?: number,
    randomWeight?: number,
    useSeperateAddon?: boolean,
    useSlider?: boolean,
    templateStack?: {
        id: string,
        data: number
    }[],
    widthStack?: {
        id: string,
        data: string
    }[],
    isEditModeOn?: boolean,
};
export type Row = {
    [key: string]: any,
    id: string,
    index: number,
    isBackpack?: boolean,
    title: string,
    titleText: string,
    debugTitle?: string,
    objectWidth: string,
    image: string,
    template: number,
    isButtonRow?: boolean,
    buttonType?: boolean,
    buttonId?: string,
    buttonText?: string,
    buttonRandom?: boolean,
    buttonRandomNumber?: number,
    isWeightedRandom?: boolean,
    isResultRow?: boolean,
    resultGroupId?: string,
    isInfoRow?: boolean,
    isGroupRow?: boolean,
    defaultAspectWidth: number,
    defaultAspectHeight: number,
    allowedChoices: number,
    currentChoices: number,
    requireds: Requireds[],
    isEditModeOn?: boolean,
    isRequirementOpen?: boolean,
    objects: Choice[],
    rowDesignGroups?: string[],
    imageIsUrl?: boolean,
    width?: boolean,
    deselectChoices?: boolean,
    rowJustify?: string,
    groups?: string[],
    imageSourceTooltip?: string,
    isPrivateStyling?: boolean,
    privateFilterIsOn?: boolean,
    privateTextIsOn?: boolean,
    privateObjectImageIsOn?: boolean,
    privateObjectIsOn?: boolean,
    privateRowImageIsOn?: boolean,
    privateRowIsOn?: boolean,
    privateAddonImageIsOn?: boolean,
    privateAddonIsOn?: boolean,
    privateBackgroundIsOn?: boolean,
    privateMultiChoiceIsOn?: boolean,
    styling?: Styling,
    objectImgObjectFillHeight?: number,
    resultShowRowTitle?: boolean,
    textIsRemoved?: boolean,
    objectTitleRemoved?: boolean,
    objectImageRemoved?: boolean,
    objectTextRemoved?: boolean,
    objectScoreRemoved?: boolean,
    objectRequirementRemoved?: boolean,
    addonTitleRemoved?: boolean,
    addonImageRemoved?: boolean,
    addonTextRemoved?: boolean,
    buttonTypeRadio?: string,
    btnPointAddon?: boolean,
    pointTypeRandom?: string,
    randomMin?: number,
    randomMax?: number,
    onlyUnselectedChoices?: boolean,
    onlyIfNoChoices?: boolean,
    choicesShareTemplate?: boolean,
    defaultTemplate?: number,
    defaultWidth?: string,
    templateStack?: {
        id: string,
        data: number
    }[],
    widthStack?: {
        id: string,
        data: string
    }[]
};
export type PointType = {
    id: string,
    name: string,
    startingSum: number,
    initValue: number,
    activatedId: string,
    beforeText: string,
    afterText: string,
    belowZeroNotAllowed?: boolean,
    isNotShownPointBar?: boolean,
    isNotShownObjects?: boolean,
    plussOrMinusAdded?: boolean,
    plussOrMinusInverted?: boolean,
    pointColorsIsOn?: boolean,
    positiveColor?: string,
    negativeColor?: string,
    iconIsOn?: boolean,
    useSeperatePosition?: boolean,
    image?: string,
    imageOnSide?: boolean,
    imageSidePlacement?: boolean,
    imageOnSideInChoice?: boolean,
    imageSidePlacementInChoice?: boolean,
    iconWidth?: number,
    iconHeight?: number,
    negativeIconIsOn?: boolean,
    negativeImage?: string,
    negativeImageOnSide?: boolean,
    negativeImageSidePlacement?: boolean,
    negativeImageOnSideInChoice?: boolean,
    negativeImageSidePlacementInChoice?: boolean,
    negativeIconWidth?: number,
    negativeIconHeight?: number,
    pointPrivateColorIsOn?: boolean,
    privateColor?: string,
    privateNegativeColor?: string,
    imageIsURL?: boolean,
    allowFloat?: boolean,
    decimalPlaces?: number
};
export type Variable = {
    id: string,
    isTrue: boolean
}
export type Group = {
    id: string,
    name: string,
    elements: string[],
    rowElements: string[]
};
export type CommonImage = {
    [key: string]: any,
    id?: string,
    image?: string,
    imageIsURL?: boolean
};
export type GlobalRequirement = {
    id: string,
    name: string,
    requireds: Requireds[]
}
export type Word = {
    id: string,
    replaceText: string
}
export type RowDesignGroup = {
    [key: string]: any,
    id: string,
    name: string,
    activatedId: string,
    elements: string[],
    backpackElements: string[],
    privateFilterIsOn?: boolean,
    privateTextIsOn?: boolean,
    privateObjectImageIsOn?: boolean,
    privateObjectIsOn?: boolean,
    privateRowImageIsOn?: boolean,
    privateRowIsOn?: boolean,
    privateAddonImageIsOn?: boolean,
    privateAddonIsOn?: boolean,
    privateBackgroundIsOn?: boolean,
    styling: Styling
}
export type ObjectDesignGroup = {
    [key: string]: any,
    id: string,
    name: string,
    activatedId: string,
    elements: string[],
    backpackElements: string[],
    privateFilterIsOn?: boolean,
    privateTextIsOn?: boolean,
    privateObjectImageIsOn?: boolean,
    privateObjectIsOn?: boolean,
    privateAddonImageIsOn?: boolean,
    privateAddonIsOn?: boolean,
    privateBackgroundIsOn?: boolean,
    styling: Styling
}
export type App = {
    [key: string]: any,
    version?: string,
    isEditModeOnAll: boolean,
    isStyleOpen: boolean,
    isPointsOpen: boolean,
    isChoicesOpen: boolean,
    isDesignOpen: boolean,
    isPointerCursor: boolean,
    importedChoicesIsOpen: boolean,
    curVolume: number,
    isMute: boolean,
    showMusicPlayer: boolean,
    fadeTransitionColor: string,
    fadeTransitionTime: number,
    fadeTransitionIsOn: boolean,
    hideBackpackBtn: number,
    btnBackpackIsOn: number,
    showAllAddons: number,
    tmpRow: Row[],
    tmpChoice: Choice[],
    tmpRequired: Requireds[],
    tmpScore: Score[],
    tmpAddon: Addon[],
    tmpGroup: string[],
    rowIdLength: number,
    objectIdLength: number,
    words: Word[],
    groups: Group[],
    rowDesignGroups?: RowDesignGroup[],
    objectDesignGroups?: ObjectDesignGroup[],
    objectsPerRow?: string,
    globalRequirements?: GlobalRequirement[],
    googleFonts: string[],
    customFonts: string[],
    compressImageAuto: boolean,
    hideScoresUpdated: boolean,
    hideChoiceDT: boolean,
    hideImages: boolean,
    preloadImages: boolean,
    preloadExternalImages: boolean,
    useVW: boolean,
    addPrefix?: boolean,
    mdObjects: string[],
    printThis: boolean,
    autoSaveIsOn: boolean,
    autoSaveInterval: number,
    buildAutoSaveIsOn: boolean,
    buildAutoSaveInterval: number,
    tooltipDelay?: number,
    checkDeleteRow: boolean,
    checkDeleteObject: boolean,
    defaultRowTitle: string,
    defaultRowText: string,
    defaultChoiceTitle: string,
    defaultChoiceText: string,
    defaultBeforePoint: string,
    defaultAfterPoint: string,
    defaultBeforeReq: string,
    defaultAfterReq: string,
    defaultAddonTitle: string,
    defaultAddonText: string,
    enableShortcut: boolean,
    orderOrReqText: string,
    defaultOrReq: string,
    orderSelReqText: string,
    defaultSelReq: string,
    defaultBgColor?: string,
    defaultBgImage?: string,
    defaultBarBgColor?: string,
    defaultBarTextColor?: string,
    defaultBarIconColor?: string,
    bgColorStack?: {
        id: string,
        data: string
    }[],
    bgImageStack?: {
        id: string,
        data: string
    }[],
    barBgColorStack?: {
        id: string,
        data: string
    }[],
    barTextColorStack?: {
        id: string,
        data: string
    }[],
    barIconColorStack?: {
        id: string,
        data: string
    }[],
    customCSS?: string,
    variables: Variable[],
    pointTypes: PointType[],
    activated: string[],
    rows: Row[],
    backpack: Row[],
    styling: Styling
};
export type RowMap = {
    rows: number,
    type: string
};
export type ObjectMap = {
    rows: number,
    objects: number,
    type: string
};
export type GroupMap = {
    groups: number,
    rows: string[],
    objects: string[]
};
export type PointTypeMap = {
    points: number,
    startingSum: number
};
export type ActivatedMap = {
    multiple: number,
    activatedFrom?: number,
    isAllowDeselect?: boolean,
    isVariable?: boolean
};
export type ChoiceMap = {
    choice: Choice,
    row: Row
};
export type BgmPlayer = {
    isBgmInit: boolean,
    bgmIsPlaying: boolean,
    bgmPlayInterval: number,
    bgmTitleInterval: number,
    bgmFadeInterval: number,
    bgmFadeTimer: number,
    bgmTitle: string,
    curBgmTime: number,
    curBgmLength: number,
    isSeeking: boolean,
    lastFadeTime: number,
    isFadingOut: boolean,
    bgmObjectId: string,
};
export type SaveSlot = {
    stored: boolean,
    name: string,
    time: string,
    app: string
};
export type TempScore = Map<string, number>;
export type DlgVariables = {
    currentDialog: string,
    data?: Row | Choice | Addon | Requireds | Score,
    point?: PointType,
    func?: (e: number) => void,
    cFunc?: (e: any, word?: string) => void,
    choice?: Choice,
    row?: Row,
    imgProp?: string,
    title?: string,
    context?: string,
    isWord?: boolean
};
export type SnackBarVariables = {
    labelText: string,
    timeoutMs: number,
    isOpen: boolean
};
export type ViewerSetting = {
    allowDeselect: boolean,
    isSingleFile: boolean
};